package service

import (
	"context"
	"fmt"
	"log"
	"strconv"

	projectv1 "github.com/gatepoint/gatepoint/api/gatepoint/v1"
	generalv1 "github.com/gatepoint/gatepoint/api/general/v1"
	"github.com/gatepoint/gatepoint/pkg/kube"
	"github.com/gatepoint/gatepoint/pkg/utils"
	"google.golang.org/protobuf/types/known/emptypb"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

type DemoService struct {
	// This is generated by protoc
	projectv1.UnimplementedDemoServiceServer
	clientset kubernetes.Interface
}

func NewDemoService() *DemoService {
	return &DemoService{clientset: kube.GetKubeClient()}
}
func (s *DemoService) Demo(ctx context.Context, req *generalv1.DemoRequest) (*generalv1.DemoResponse, error) {
	return &generalv1.DemoResponse{
		Demo: &generalv1.Demo{
			Demo: req.Demo,
		},
	}, nil
}

func (s *DemoService) Token(ctx context.Context, req *emptypb.Empty) (*generalv1.TokenResponse, error) {
	pods, err := s.clientset.CoreV1().Pods("").List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		log.Fatalf("error: %s", err)
	}
	fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))

	svcs, err := s.clientset.CoreV1().Services("").List(ctx, metav1.ListOptions{})
	if err != nil {
		log.Fatalf("error: %s", err)
	}
	fmt.Printf("There are %d svcs in the cluster\n", len(svcs.Items))

	secrets, err := s.clientset.CoreV1().Secrets("").List(ctx, metav1.ListOptions{})
	if err != nil {
		log.Fatalf("error: %s", err)
	}
	fmt.Printf("There are %d secrets in the cluster\n", len(secrets.Items))

	// run cmd
	//app := "helm"
	//
	//arg0 := "install"
	//arg1 := "eg2"
	//arg2 := "oci://docker.io/envoyproxy/gateway-helm"
	//arg3 := "--version"
	//arg4 := "v0.0.0-latest"
	//arg5 := "-n"
	//arg6 := "envoy-gateway-system"
	//arg7 := "--create-namespace"
	//
	//cmd := exec.Command(app, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	//stdout, err := cmd.Output()
	//
	//if err != nil {
	//	fmt.Println(err.Error())
	//}
	//
	//// Print the output
	//fmt.Println(string(stdout))

	accessToken, _, errGenTokens := utils.GenerateTokens(strconv.Itoa(len(pods.Items)))
	if errGenTokens != nil {
		return nil, errGenTokens
	}
	return &generalv1.TokenResponse{
		Token: accessToken,
	}, nil
}
